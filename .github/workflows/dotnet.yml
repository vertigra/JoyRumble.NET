# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: ARM Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:  
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        base_image: ["raspios_lite:latest", "raspios_lite_arm64:latest"]
        include:
        - base_image: raspios_lite:latest
          arch: armv7l
          cpu: cortex-a7
          cpu_info: cpuinfo/raspberrypi_4b
        - base_image: raspios_lite_arm64:latest
          arch: aarch64
          cpu: cortex-a53
          cpu_info: cpuinfo/raspberrypi_4b
    steps:
    - uses: actions/checkout@v4
    - 
      name: Check disk space
      run: df . -h
    - uses: pguyot/arm-runner-action@v2.5.2
      with:
        base_image: ${{ matrix.base_image }}
        cpu: ${{ matrix.cpu }}
        cpu_info: ${{ matrix.cpu_info }}
        image_additional_mb: 1536
        commands: |
            df . -h
            test `uname -m` = ${{ matrix.arch }}
            grep Model /proc/cpuinfo
            apt-get update
            apt-get install -y g++
            apt-get install -y wget
            wget -O - https://raw.githubusercontent.com/pjgpetecodes/dotnet7pi/main/install.sh | sudo bash
            wget https://aka.ms/install-artifacts-credprovider.sh | bash
            dotnet new install GCC.Build.Template --interactive --nuget-source https://api.nuget.org/v3/index.json   

    #steps:
    #- uses: actions/checkout@v3
    #- uses: uraimo/run-on-arch-action@v2.5.1
    #  name: Run commands
    #  id: build-arm64
    #  with:
    #    arch: aarch64
    #    distro: ubuntu_latest

    #     dockerRunArgs: |
    #        --volume "${PWD}/src:/src"
    #    
    #    shell: /bin/sh

    #    install: |
    #     apt-get update
    #     apt-get install -y dotnet-sdk-7.0
    #     apt-get install -y g++
    #     apt-get install -y curl
    #     curl -fsSL https://aka.ms/install-artifacts-credprovider.sh
    #     dotnet new install GCC.Build.Template --interactive --nuget-source https://api.nuget.org/v3/index.json         

    #   run: |
    #     chmod +x src/DotnetLinuxBuild.sh
    #     bash src/DotnetLinuxBuild.sh -c LinuxDebug -p ARM64
    
    #- name: Upload Artifact
    #  uses: actions/upload-artifact@v3
    #  with:
    #   name: joyramble-debug-arm64
    #   path: /home/runner/work/JoyRumble.NET/JoyRumble.NET/src/bin/LinuxDebug/
    #   if-no-files-found: warn
